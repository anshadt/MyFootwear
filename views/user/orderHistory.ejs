<%- include('../../views/partials/userHeader') %>
<link rel="stylesheet" href="/css/ar.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">



    <style>
        body {
            background-color: #f8f9fa;
            padding-top: 10rem;
        }

        .container {
            margin-top: 50px;
            margin-bottom: 50px;
        }

        h1 {
            margin-bottom: 30px;
            font-weight: 600;
        }

        .table {
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .table th,
        .table td {
            vertical-align: middle;
        }

        .table thead th {
            background-color: #000000;
            color: white;
        }

        .table tbody tr:hover {
            background-color: #e9ecef;
            cursor: pointer;
        }

        .collapse {
            margin-top: 10px;
        }

        .order-image {
            max-width: 100px; 
            height: auto;
        }
        
        .breadcrumb-item a {
            text-decoration: none;
        }

        
        .pagination {
            justify-content: center;
            margin-top: 20px;
        }

        .pagination a {
            text-decoration: none;
        }

        .pagination .page-item.active .page-link {
            background-color: #007bff;
            border-color: #007bff;
            color: white;
        }
        .breadcrumb {
            background-color: #f8f9fa;
            border-radius: 0.375rem; 
            padding: 0.75rem 1rem;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); 
        }

        .breadcrumb-item + .breadcrumb-item::before {
            content: ">";
            color: #6c757d;
        }

        .breadcrumb-item a {
            text-decoration: none;
            color: #007bff; 
        }

        .breadcrumb-item a:hover {
            text-decoration: underline;
        }

        .breadcrumb-item.active {
            color: #6c757d; 
        }
        .navbar a{
            color: #145495;
        }
            .icon-hover-primary:hover {
    border-color: #3b71ca !important;
    background-color: white !important;
    }

    .icon-hover-primary:hover i {
    color: #3b71ca !important;
    }
    .icon-hover-danger:hover {
    border-color: #dc4c64 !important;
    background-color: white !important;
    }

    .icon-hover-danger:hover i {
    color: #dc4c64 !important;
    }
        
        .sidebar {
        height: 100vh;
        background-color: #2c3e50;
        position: fixed;
        padding-top: 5rem;
        }
        .sidebar a {
        color: white;
        transition: background-color 0.3s ease;
        }
        .sidebar a:hover {
        background-color: #34495e;
        }
        .profile-header {
        background-color: #00bcd4; 
        color: white;
        padding: 20px;
        text-align: center;
        }
        .profile-pic {
        width: 150px;
        height: 150px;
        object-fit: cover;
        border-radius: 50%;
        border: 5px solid white;
        transition: transform 0.3s;
        }
        .profile-pic:hover {
        transform: scale(1.1);
        }
        .profile-card {
        margin-top: 20px;
        z-index: 1;
        background: white;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .address-card {
        background: #f1f1f1;
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 10px;
        position: relative;
        transition: background 0.3s;
        }
        .address-card:hover {
        background: #e1e1e1;
        }

        .dropdown-menu {
    padding: 0;
    margin: 0;
    }

    .profile-link {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: inherit;
    padding: 8px 16px;
    transition: background-color 0.2s ease; 
    }

    .profile-link:hover {
    background-color: #f0f0f0; 
    }

    .profile-avatar {
    width: 24px; 
    height: 24px;
    border-radius: 50%; 
    margin-right: 8px; 
    }

    .logout-link {
    margin-bottom: 8px; 
    }
    .fixed-header {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1000;
    height: 150px; 
    }

    .content-section {
    margin-top: 20px; 
    }

.breadcrumb {
            background-color: #f8f9fa; 
            border-radius: 0.375rem;
            padding: 0.75rem 1rem;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); 
        }

        .breadcrumb-item + .breadcrumb-item::before {
            content: ">";
            color: #6c757d;
        }

        .breadcrumb-item a {
            text-decoration: none;
            color: #007bff;
        }

        .breadcrumb-item a:hover {
            text-decoration: underline;
        }

        .breadcrumb-item.active {
            color: #6c757d; 
        }
  </style>
  <header class="header_section bg-dark fixed-header">
    <div class="container">
      <nav class="navbar navbar-expand-lg custom_nav-container">
        <a class="navbar-brand" href="/userHomePage">
          <span>
        Footwear
          </span>
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent">
          <span class=""> </span>
        </button>
  
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav mx-auto">
            <li class="nav-item active">
              <a class="nav-link" href="/userHomePage">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">About us</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Contact us</a>
            </li>
          </ul>
  
          <div class="user_option">
            <a class="cart_link position-relative" href="/getCartPage">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 456.029 456.029" width="50" height="50">
                <path d="M345.6 338.862c-29.184 0-53.248 23.552-53.248 53.248s23.552 53.248 53.248 53.248 53.248-23.552 53.248-53.248-23.552-53.248-53.248-53.248zM439.296 84.91h-330.56l-5.12-34.304c-2.048-13.824-21.504-30.72-44.544-30.72H20.48C9.216 19.886 0 29.102 0 40.366S9.216 60.846 20.48 60.846h41.472c2.56 0 4.608 2.048 5.12 4.608l31.744 216.064c4.096 27.136 27.648 47.616 55.296 47.616h212.992c26.624 0 49.664-18.944 55.296-45.056l33.28-166.4c4.096-21.504-3.072-32.256-14.336-34.304zM215.04 389.55c-1.024-28.16-24.576-50.688-52.736-50.688-29.696 1.536-52.224 26.112-51.2 55.296 1.024 28.16 24.064 50.688 52.224 50.688 29.184 0 52.224-24.576 51.712-55.296z"/>
              </svg>
              <!-- Cart Count Badge -->
              <span id="cartCount" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                <%= cartCount %>
              </span>
            </a>
            <a class="cart_link position-relative" href="/wishlist">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="50" height="50" fill="red">
                <path d="M462.3 62.7C407 7.4 324.8 23.9 270.1 79.1L256 93.3l-14.1-14.2c-54.8-55.2-136.9-71.7-192.2-16.4S-7.4 199.9 48 255.2L239 445.5c7.4 7.5 19.6 7.5 27 0l205.4-205.4c55.2-54.8 71.7-136.9 16.4-192.2z"/>
              </svg>
              <span data-toggle="tooltip" data-placement="bottom" title="<%= wishlistCount %>" id="cartCount" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                <%= wishlistCount %>
              </span>
            </a>
            <p class="user_proname"><%= user.name %></p>
  
            <div class="dropdown">
              <button class="btn btn-secondary dropdown-toggle" type="button" id="loginDropdown" data-bs-toggle="dropdown">
                <i class="fa fa-user" aria-hidden="true"></i>
              </button>
  
              <div class="dropdown-menu">
                <a href="/profilePage" class="profile-link">
                  <img src="/images/profile.png" class="profile-avatar"> Profile
                </a>
                <a href="/orderHistory" class="profile-link">
                  <img src="/images/purchase-order.png" class="profile-avatar"> Orders
                </a>
                <a href="/getCartPage" class="profile-link">
                  <img src="/images/shopping-cart (1).png" class="profile-avatar"> Cart
                </a>
                <a href="wishlist" class="profile-link">
                  <img src="/images/wishlist.png" class="profile-avatar"> Wishlist
                </a>
                <a href="/loadWalletPage" class="profile-link">
                  <img src="/images/wallet.png" class="profile-avatar"> Wallet
                </a>
                <a href="/logout"class="profile-link logout-link">
                  <img src="/images/shutdown.png" class="profile-avatar"> Logout
                </a>
              </div>
            </div>
          </div>
        </div>
      </nav>
    </div>
  </header>
  <div class="container mt-5">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb bg-light p-3 shadow-sm rounded">
            <li class="breadcrumb-item"><a href="/userHomePage">Home</a></li>
            <li class="breadcrumb-item"><a href="/getCartPage">Cart Page</a></li>
            <li class="breadcrumb-item active" aria-current="page">Order History</li>
        </ol>
    </nav>

    <h1 class="text-center my-4">Order History</h1>

    <div class="card shadow-sm p-4 border-0 rounded">
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead class="table-dark">
                    <tr class="text-center">
                        <th scope="col">Order Id</th>
                        <th scope="col">Product Name</th>
                        <th scope="col">Order Status</th>
                        <th scope="col">Payment Method</th>
                        <th scope="col">Payment Status</th>
                        <th scope="col">Discount Amount</th>
                        <th scope="col">Total</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (orders.length > 0) { %>
                        <% orders.forEach((order, index) => { %>
                            <tr class="bg-light">
                                <th scope="row" class="text-center"><%= order.orderId %></th>
                                <td class="text-center">
                                    <% order.items.forEach((item) => { %>
                                        <span class="d-block"><%= item.product.productname %></span>
                                    <% }); %>
                                </td>
                                <td class="text-center">
                                    <span class="badge 
                                        <%= order.orderStatus === 'Delivered' ? 'bg-success' : 
                                        order.orderStatus === 'Cancelled' ? 'bg-danger' : 
                                        order.orderStatus === 'Shipped' ? 'bg-warning' :
                                        order.orderStatus === 'Returned' ? 'bg-primary': 
                                        'bg-secondary' %>">
                                        <%= order.orderStatus %>
                                    </span>
                                </td>
                                <td class="text-center"><%= order.paymentMethod %></td>
                                <td class="text-center"><%= order.paymentStatus %></td>
                                <td class="text-center"><%= order.discountAmount %></td>
                                <td class="text-center"><%= order.totalAmount %></td>
                                <%= console.log(order.orderStatus) %>
                                
                                <td>
                                    <% if (order.orderStatus === 'Delivered') { %>
                                        <%= console.log(order.orderStatus) %>
                                          <button type="button" class="btn btn-warning" onclick="handleReturn('<%= order._id %>', this)" data-toggle="tooltip" data-placement="bottom" title="Return Order">Return</button> 

                                    <% } else if (order.orderStatus === 'Returned') { %>
                                        
                                        <span class="text-muted">Returned</span>
                                    <% } else if (['Processing', 'Shipped', 'Cancelled'].includes(order.orderStatus)) { %>
                                        <button type="button" class="btn btn-secondary" disabled>
                                            <%= order.orderStatus === 'Cancelled' ? 'Cancelled' : 'Cancel' %>
                                        </button>
                                    <% } else { %>
                                        <button type="button" class="btn btn-outline-danger" onclick="cancelOrder('<%= order.orderId %>', this)" data-toggle="tooltip" data-placement="bottom" title="You Want to Cancel Order">Cancel</button>
                                    <% } %>
                                  
                                    <button class="btn btn-outline-info ms-2" onclick="toggleDetails('<%= index %>')" data-toggle="tooltip" data-placement="bottom" title="Click Item Details" >
                                        <i class="bi bi-info-circle"></i>
                                    </button>
                                    
                                    <% if (order.paymentStatus === 'Failed') { %>
                                        <button type="button" onclick="Repayment('<%= order._id %>')" class="btn btn-outline-success ms-2" data-toggle="tooltip" data-placement="bottom" title="Retry Payment">
                                            <i class="bi bi-arrow-repeat"></i>
                                        </button>
                                        <% } else { %>
                                            
                                        <a href="/invoice/<%= order._id %>" class="btn btn-outline-success ms-2" data-toggle="tooltip" data-placement="bottom" title="Download Invoice"><i class="bi bi-download"></i></a>
                                        <% } %>
                                </td>
                            </tr>
                            <tr class="details-row" id="details<%= index %>" style="display: none;">
                                <td colspan="7">
                                    <div class="p-4 border rounded bg-light shadow-sm">
                                        <h5 class="text-primary mb-3">Order Details</h5>
                                        <div class="d-flex flex-wrap align-items-start">
                                            <div class="me-4 mb-3 d-flex flex-wrap">
                                                <% order.items.forEach((item) => { %>
                                                    <div class="me-4 mb-3 text-center border rounded bg-white shadow-sm p-3" style="width: 150px;">
                                                        <img src="<%= item.product.images[0] %>" alt="<%= item.product.productname %>" class="img-fluid rounded mb-2" style="width: 100%; height: auto;">
                                                        <p class="m-0"><strong><%= item.product.productname %></strong></p>
                                                        <p class="text-muted">Qty: <%= item.quantity %></p>
                                                    </div>
                                                <% }); %>

                                                
                                                
                                            </div>
                                            <div class="flex-grow-1">
                                                <ul class="list-unstyled">
                                                    <li class="mb-2"><strong>Order Date:</strong> <span class="text-muted"><%= order.createdAt.toLocaleString() %></span></li>
                                                    <li class="mb-2"><strong>Delivered Time:</strong> 
                                                        <span class="text-muted">
                                                            <%= new Date(order.createdAt.getTime() + 30 * 60 * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %>
                                                        </span>
                                                    </li>
                                                    <li>
                                                        <strong>Shipping Address:</strong>
                                                        <div class="text-muted">
                                                            <p class="m-0"><strong><%= order.address[0].fullName %></strong></p>
                                                            <p class="m-0"><%= order.address[0].streetAddress %>, <%= order.address[0].city %></p>
                                                            <p class="m-0"><strong>Phone:</strong> <%= order.address[0].phone %></p>
                                                        </div>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            
                            
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="7" class="text-center text-muted">No orders found.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Cancel Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">New message</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <form>
                <div class="form-group">
                  <label for="recipient-name" class="col-form-label">Recipient:</label>
                  <input type="text" class="form-control" id="recipient-name">
                </div>
                <div class="form-group">
                  <label for="message-text" class="col-form-label">Message:</label>
                  <textarea class="form-control" id="message-text"></textarea>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
              <button type="button" class="btn btn-primary">Send message</button>
            </div>
          </div>
        </div>
      </div>


      <div class="d-flex justify-content-center mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <% if (currentPage > 1) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage - 1 %>&limit=<%= limit %>">Previous</a>
                    </li>
                <% } %>
    
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>"><%= i %></a>
                    </li>
                <% } %>
    
                <% if (currentPage < totalPages) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage + 1 %>&limit=<%= limit %>">Next</a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>


function toggleDetails(index) {
        const detailsRow = document.getElementById(`details${index}`);
        if (detailsRow.style.display === "none") {
            detailsRow.style.display = "table-row";
        } else {
            detailsRow.style.display = "none";
        }
    }


    async function cancelOrder(orderId,button) {
    if (button.disabled) {
        Swal.fire({
            title: 'Cannot Cancel',
            text: 'This order cannot be cancelled at this time.',
            icon: 'info',
        });
        return;
    }
    const confirmation = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    });
    if (!confirmation.isConfirmed) {
        return;
    }

    try {
        button.disabled = true;
        button.textContent = 'Cancelling...';

        const response = await fetch(`/orders/${orderId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId}),
        });

        if (!response.ok) {
            throw new Error(`Server error: ${response.status}`);
        }

        const result = await response.json();
        button.textContent = 'Cancelled';
        button.classList.remove('btn-danger');
        button.classList.add('btn-secondary');

        Swal.fire({
            title: 'Order Cancelled',
            text: result.message,
            icon: 'success',
        }).then(() => {
            const redirectUrl = result.redirect || "/orderHistory";
            window.location.href = redirectUrl;
        });

    } catch (error) {
        button.disabled = false;
        button.textContent = 'Cancel';
        console.error('Fetch error:', error);  
        Swal.fire({
            title: 'Error!',
            text: 'Something went wrong. Please try again.',
            icon: 'error',
        });
    }
}



        async function Repayment(orderId) {
            try {
                const response = await fetch('/repaymentRazorpay', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId })
                });

                if (response.ok) {
                    const result = await response.json();

                    console.log(result);
                    
                    if (result.success) {
                        const options = {
                            key: result.key,
                            amount: result.amount,
                            currency: result.currency,
                            name: result.name,
                            description: result.description,
                            order_id: result.orderId,
                            handler: async function (response) {
                                const verifyResponse = await fetch('/verifyRepayment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        orderId: orderId,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature
                                    })
                                });

                                const verifyResult = await verifyResponse.json();

                                if (verifyResult.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'payment success',
                                        text: 'Your payment has been  successfully.',
                                        confirmButtonText: 'OK',
                                        timer: 2000
                                    }).then(() => {
                                        window.location.reload();
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: "Payment Failed",
                                        text: 'Payment verification failed. Please try again.',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            },
                            prefill: {
                                name: "<%= user.username %>",
                                email: "<%= user.email %>",
                            },
                            theme: {
                                color: '#000000'
                            }
                        };
                        

                        const rzp = new Razorpay(options);
                        rzp.open();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: "Payment Failed",
                            text: 'Payment verification failed. Please try again.',
                            confirmButtonText: 'OK'
                        });
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to pay',
                        text: 'Error fetching payment details. Please try again later.',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. try agian later..',
                    confirmButtonText: 'OK'
                });
            }
        }

        function handleReturn(orderId, buttonElement) {
    console.log("Returning order with orderId:", orderId); 

    
    if (!orderId) {
        Swal.fire({
            icon: 'error',
            title: 'Order ID Missing',
            text: 'The order ID is missing, please try again.',
            confirmButtonColor: '#3085d6',
        });
        return;
    }

    Swal.fire({
        title: "Are you sure?",
        text: "Do you want to return this order?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, return it!"
    }).then((result) => {
        if (result.isConfirmed) {

    
    fetch('/return-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json' 
        },
        body: JSON.stringify({ orderId: orderId }) 
    })
    .then(response => {
        console.log("Response from server:", response); 
        if (!response.ok) {
            throw new Error("Server error: " + response.statusText);
        }
        return response.json();
    })
    .then(data => {
        console.log("Response data:", data); 
        if (data.success) {
            buttonElement.closest('tr').querySelector('.badge').classList.remove('bg-success');
            buttonElement.closest('tr').querySelector('.badge').classList.add('bg-secondary');
            buttonElement.closest('tr').querySelector('.badge').textContent = 'Returned';
            buttonElement.textContent = 'Returned';
                    buttonElement.disabled = true;
                    buttonElement.classList.remove('btn-warning');
                    buttonElement.classList.add('btn-secondary');
            Swal.fire({
                icon: 'success',
                title: 'Order Returned!',
                text: 'Your order has been successfully returned.',
                confirmButtonColor: '#28a745',
            });
        } else {
            Swal.fire({
                        title: "Unable to Return",
                        text: "Return period has expired or there was an error processing your return.",
                        icon: "error",
                        confirmButtonColor: "#d33"
                    });
        }
    })
    .catch(error => {
        console.error("Error in fetch:", error);
        Swal.fire({
            icon: 'error',
            title: 'Something Went Wrong!',
            text: 'There was an issue with processing your request.',
            confirmButtonColor: '#dc3545',
        });
    });
}
})
}










    </script>
    
    <%- include('../../views/partials/userFooter') %>