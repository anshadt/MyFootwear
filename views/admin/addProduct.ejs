<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Add Products</title>
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css"
    />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <style>
     
      .form-container {
        background: #f9f9f9;
        border-radius: 10px;
        padding: 2rem;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        border: 1px solid #ddd;
      }

      .form-container h2 {
        margin-bottom: 1.5rem;
        font-weight: 700;
        color: #333;
      }

      .form-container label {
        font-weight: 500;
        color: #555;
      }

      .form-container .form-control {
        border-radius: 5px;
        border: 1px solid #ddd;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        padding: -0.25rem 1.25rem;
      }

      .form-container .btn-submit {
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        padding: 0.75rem 1.25rem;
        width: 100%;
        font-size: 1rem;
        font-weight: 600;
      }

      .form-container .btn-submit:hover {
        background-color: #0056b3;
        color: #fff;
      }

      .form-group {
        margin-bottom: 1.5rem;
      }

      
      @media (max-width: 767px) {
        .form-container {
          padding: 1rem;
        }
      }

      
      .img-container {
        max-width: 100%;
        max-height: 400px;
      }
      #cropModal .modal-body {
        max-height: 500px;
        overflow-y: auto;
      }
    </style>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
  </head>

  <body>
    <section>
      <div class="container mt-4">
        <div class="row justify-content-center">
          <div class="col-md-8 col-lg-6">
            <div class="form-container">
              <h2 class="text-center">Add Products</h2>
               <p class="text-danger"><%= locals.exist ? exist : null %></p> 
              <form action="#"method="post"enctype="multipart/form-data">
                <div class="form-group">
                  <label for="name">Product_Name</label>
                  <input type="text"id="pname"name="productName"class="form-control"/>
                </div>
                <div class="form-group">
                  <label for="name">Description</label>
                  <input type="text"id="dname"name="description" class="form-control"/>
                </div>
                <div class="form-group">
                  <label for="category">Category</label>
                  <select id="category"name="Category_id"class="form-control"required>
                    <% Category.forEach(function(category) { %>
                    <option value="<%=category._id%>">
                      <%= category.category_name %>
                    </option>
                    <% }); %>
                  </select>
                </div>
                <div class="form-group">
                  <label for="price">Price</label>
                  <input type="Number"id="price"name="price"class="form-control"required/>
                </div>
                <div class="form-group">
                  <label for="price">Stock</label>
                  <input type="Number"id="stock"name="stock"class="form-control"required/>
                </div>

                
                <div class="form-group" id="imgView">
                  <label for="inputImages">Product Images</label>
                  <input type="file" id="inputImages" name="productImages" class="form-control-file"
                      accept="image/png, image/jpeg, image/jpg" multiple required />
                  <div id="previewContainer" class="mt-3"></div>
                </div>
                
                <!-- Crop Modal -->
                <div class="modal fade" id="cropModal" tabindex="-1" role="dialog">
                  <div class="modal-dialog" role="document">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title">Crop Image</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>
                      <div class="modal-body text-center">
                        <img id="cropImage" style="max-width: 100%; max-height: 400px;" />
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button id="cropButton" type="button" class="btn btn-primary">Crop</button>
                      </div>
                    </div>
                  </div>
                </div>
                
               
                <button type="button" class="btn btn-secondary" onclick="openSpecModal()">Add Spec</button>

               
                <input type="hidden" id="specificationsInput" name="specifications" />
                
                
                <div class="modal fade" id="specModal" tabindex="-1" aria-labelledby="specModalLabel" aria-hidden="true">
                  <div class="modal-dialog">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="specModalLabel">Add Specification</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>
                      <div class="modal-body">
                        <div class="form-group">
                          <label for="specKey">Specification Name</label>
                          <input type="text" id="specKey" class="form-control" placeholder="e.g., Color" />
                        </div>
                        <div class="form-group">
                          <label for="specValue">Specification Value</label>
                          <input type="text" id="specValue" class="form-control" placeholder="e.g., Red" />
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="addSpec()">Add Specification</button>
                      </div>
                    </div>
                  </div>
                </div>
                <div id="specificationsDisplay" class="mt-3">
                  <h5>Specifications</h5>
                  <ul id="specList" class="list-group">
                   
                  </ul>
                </div>
                
                
                <input type="hidden" id="specificationsInput" name="specifications">

                
                <button onclick="addProduct(event)" type="submit" class="btn btn-submit mt-4">Submit</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </section>

    

   

  <script>
    let cropper;
let currentImageFile;

// Handle image input change
document.getElementById('inputImages').addEventListener('change', function (event) {
  const files = event.target.files;
  const previewContainer = document.getElementById('previewContainer');
  previewContainer.innerHTML = ''; // Clear previous previews

  Array.from(files).forEach((file, index) => {
    const reader = new FileReader();

    reader.onload = function (e) {
      const imgPreview = document.createElement('img');
      imgPreview.src = e.target.result;
      imgPreview.style.maxWidth = '25%';
      imgPreview.style.height = 'auto';
      imgPreview.style.marginRight = '10px';
      imgPreview.classList.add('img-preview');
      imgPreview.dataset.index = index;
      previewContainer.appendChild(imgPreview);

      // Add click event for cropping
      imgPreview.addEventListener('click', function () {
        currentImageFile = file;
        const cropImageElement = document.getElementById('cropImage');
        cropImageElement.src = e.target.result;

        if (cropper) cropper.destroy(); // Destroy previous cropper instance
        cropper = new Cropper(cropImageElement, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 1,
        });

        $('#cropModal').modal('show');
      });
    };

    reader.readAsDataURL(file); // Read the file as a data URL
  });
});

// Handle cropping
document.getElementById('cropButton').addEventListener('click', function () {
  if (cropper) {
    const croppedCanvas = cropper.getCroppedCanvas();

    if (croppedCanvas) {
      croppedCanvas.toBlob((blob) => {
        const croppedFile = new File([blob], `cropped-${Date.now()}.jpg`, { type: 'image/jpeg' });

        // Replace the preview image
        const previews = document.querySelectorAll('.img-preview');
        previews[currentImageFile.dataset.index].src = URL.createObjectURL(croppedFile);

        // Optional: Add the cropped file to form data for upload
        const inputElement = document.createElement('input');
        inputElement.type = 'hidden';
        inputElement.name = `croppedImage-${currentImageFile.dataset.index}`;
        inputElement.value = croppedFile;
        document.querySelector('form').appendChild(inputElement);

        $('#cropModal').modal('hide');
      }, 'image/jpeg', 0.95);
    }
  }
});

// Add product submission functionality
async function addProduct(event) {
  event.preventDefault();

  const formData = new FormData(event.target);
  try {
    const response = await fetch('/admin/addProduct', {
      method: 'POST',
      body: formData,
    });

    const data = await response.json();
    if (response.ok && data.success) {
      Swal.fire('Success', 'Product added successfully!', 'success').then(() => {
        window.location.reload();
      });
    } else {
      Swal.fire('Error', data.error || 'Something went wrong!', 'error');
    }
  } catch (error) {
    Swal.fire('Error', 'Failed to add product. Please try again.', 'error');
  }
}

document.querySelector('form').addEventListener('submit', addProduct);

  </script>
    
<!-- <script>
      document.querySelector("form").addEventListener("submit", function () {
  document.getElementById("specifications").value = JSON.stringify(specifications);
});

let cropper;
let currentImageInput;

function viewImage(event) {
  const input = event.target;
  const files = input.files;
  const previewContainer = document.getElementById('previewContainer');
  previewContainer.innerHTML = ''; // Clear previous previews

  if (files) {
    Array.from(files).forEach((file) => {
      const reader = new FileReader();
      reader.onload = function (e) {
        const preview = document.createElement('img');
        preview.src = e.target.result;
        preview.style.maxWidth = '25%';
        preview.style.height = 'auto';
        preview.style.marginRight = '10px';
        preview.classList.add('img-preview');
        previewContainer.appendChild(preview);

        // Event for cropping the image
        preview.addEventListener('click', function () {
          const cropImageElement = document.getElementById('cropImage');
          cropImageElement.src = e.target.result;

          if (cropper) cropper.destroy(); // Destroy previous cropper instance

          cropper = new Cropper(cropImageElement, {
            aspectRatio: 1, // Adjust aspect ratio as needed
            viewMode: 1,
            autoCropArea: 1,
          });

          $('#cropModal').modal('show');
        });
      };
      reader.readAsDataURL(file); // Read the file as a data URL
    });
  }
}

// Event listener for cropping
document.getElementById('cropButton').addEventListener('click', function () {
  if (cropper) {
    const croppedCanvas = cropper.getCroppedCanvas();

    if (croppedCanvas) {
      const whiteCanvas = document.createElement('canvas');
      whiteCanvas.width = croppedCanvas.width;
      whiteCanvas.height = croppedCanvas.height;

      const ctx = whiteCanvas.getContext('2d');
      ctx.fillStyle = 'white';
      ctx.fillRect(0, 0, whiteCanvas.width, whiteCanvas.height);
      ctx.drawImage(croppedCanvas, 0, 0);

      whiteCanvas.toBlob((blob) => {
        const croppedFile = new File([blob], 'cropped.jpg', { type: 'image/jpeg' });
        const croppedUrl = URL.createObjectURL(croppedFile);

        // Update the preview image
        const previews = document.querySelectorAll('.img-preview');
        if (previews.length > 0) previews[0].src = croppedUrl;

        $('#cropModal').modal('hide');
      }, 'image/jpeg', 0.95);
    }
  }
});

// Open specifications modal
function openSpecModal() {
  $('#specModal').modal('show');
}

let specifications = [];

// Add a specification to the list
function addSpec() {
  const key = document.getElementById('specKey').value.trim();
  const value = document.getElementById('specValue').value.trim();

  if (key && value) {
    const newSpec = { key, value };
    specifications.push(newSpec);

    const specItem = document.createElement('li');
    specItem.classList.add('list-group-item');
    specItem.textContent = `${key}: ${value}`;
    document.getElementById('specList').appendChild(specItem);

    document.getElementById('specKey').value = '';
    document.getElementById('specValue').value = '';
    $('#specModal').modal('hide');
  } else {
    alert('Please enter both the specification name and value.');
  }
}

// Add product functionality
async function addProduct(event) {
  event.preventDefault();

  const productName = document.getElementById('pname')?.value.trim();
  const description = document.getElementById('dname')?.value.trim();
  const Category_id = document.getElementById('category')?.value.trim();
  const price = document.getElementById('price')?.value.trim();
  const stock = document.getElementById('stock')?.value.trim();

  const productImage1 = document.getElementById('input1')?.files[0];
  const productImage2 = document.getElementById('input2')?.files[0];
  const productImage3 = document.getElementById('input3')?.files[0];
  const productImage4 = document.getElementById('input4')?.files[0];

  // Ensure all required inputs exist
  if (!document.getElementById('input1') || !document.getElementById('input2') ||
      !document.getElementById('input3') || !document.getElementById('input4')) {
    Swal.fire({
      title: "Error",
      text: "One or more required image inputs are missing",
      icon: "error",
      confirmButtonText: "Okay",
    });
    return;
  }

  // Check if all fields are filled
  if (productName && description && price && stock && productImage1 && productImage2 && productImage3 && productImage4) {
    if (description.trim().split(/\s+/).length > 30) {
      Swal.fire({
        title: 'Error',
        text: "Only 30 words allowed in description",
        icon: "error",
        confirmButtonText: "Okay",
      });
      return;
    }

    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) <= 0) {
      Swal.fire({
        title: 'Error',
        text: "Please enter a valid price (positive number with up to two decimal places)",
        icon: "error",
        confirmButtonText: "Okay",
      });
      return;
    }

    if (!/^\d+$/.test(stock) || parseInt(stock) < 0) {
      Swal.fire({
        title: 'Error',
        text: "Please enter a valid stock amount (non-negative integer)",
        icon: "error",
        confirmButtonText: "Okay",
      });
      return;
    }

    const formData = new FormData();
    formData.append('productName', productName);
    formData.append('Category_id', Category_id);
    formData.append('description', description);
    formData.append('price', price);
    formData.append('stock', stock);
    formData.append('productImage1', productImage1);
    formData.append('productImage2', productImage2);
    formData.append('productImage3', productImage3);
    formData.append('productImage4', productImage4);
    formData.append('specifications', JSON.stringify(specifications));

    try {
      const response = await fetch("/admin/addProduct", {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (response.ok) {
        if (data.success) {
          Swal.fire({
            title: 'Success',
            text: "Product added successfully",
            icon: "success",
            timer: 1000,
          }).then(() => {
            window.location.href = '/admin/loadProuctPage';
          });
        } else if (data.error) {
          Swal.fire({
            title: "Error",
            text: data.error,
            icon: "error",
          });
        }
      } else {
        Swal.fire({
          title: "Oops!",
          text: "Server error: " + data.error,
          icon: "error",
        });
      }
    } catch (error) {
      Swal.fire({
        title: "Oops!",
        text: "Something went wrong! Please try again.",
        icon: "error",
      });
    }
  } else {
    Swal.fire({
      title: "Error",
      text: "Please fill all required fields",
      icon: "error",
      confirmButtonText: "Okay",
    });
  }
}

</script> -->


<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  </body>
</html>